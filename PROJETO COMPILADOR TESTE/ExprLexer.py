# Generated from Expr.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,33,209,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,
        2,1,2,1,3,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,
        7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,11,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,14,
        1,14,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,17,
        1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,
        1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,
        1,27,1,27,1,27,1,28,1,28,5,28,171,8,28,10,28,12,28,174,9,28,1,29,
        4,29,177,8,29,11,29,12,29,178,1,30,1,30,1,30,1,30,5,30,185,8,30,
        10,30,12,30,188,9,30,1,30,1,30,1,31,4,31,193,8,31,11,31,12,31,194,
        1,31,1,31,1,32,1,32,1,32,1,32,5,32,203,8,32,10,32,12,32,206,9,32,
        1,32,1,32,0,0,33,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,
        11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,
        22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,
        33,1,0,6,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,
        48,57,4,0,10,10,13,13,34,34,39,39,3,0,9,10,13,13,32,32,2,0,10,10,
        13,13,214,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,
        0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,
        0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,
        0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,
        0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,
        0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,
        0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,1,67,1,0,0,0,3,74,1,
        0,0,0,5,79,1,0,0,0,7,84,1,0,0,0,9,87,1,0,0,0,11,89,1,0,0,0,13,93,
        1,0,0,0,15,98,1,0,0,0,17,100,1,0,0,0,19,105,1,0,0,0,21,107,1,0,0,
        0,23,109,1,0,0,0,25,117,1,0,0,0,27,119,1,0,0,0,29,122,1,0,0,0,31,
        127,1,0,0,0,33,132,1,0,0,0,35,138,1,0,0,0,37,145,1,0,0,0,39,147,
        1,0,0,0,41,149,1,0,0,0,43,151,1,0,0,0,45,153,1,0,0,0,47,155,1,0,
        0,0,49,157,1,0,0,0,51,160,1,0,0,0,53,163,1,0,0,0,55,165,1,0,0,0,
        57,168,1,0,0,0,59,176,1,0,0,0,61,180,1,0,0,0,63,192,1,0,0,0,65,198,
        1,0,0,0,67,68,5,64,0,0,68,69,5,115,0,0,69,70,5,116,0,0,70,71,5,97,
        0,0,71,72,5,114,0,0,72,73,5,116,0,0,73,2,1,0,0,0,74,75,5,64,0,0,
        75,76,5,101,0,0,76,77,5,110,0,0,77,78,5,100,0,0,78,4,1,0,0,0,79,
        80,5,114,0,0,80,81,5,111,0,0,81,82,5,97,0,0,82,83,5,114,0,0,83,6,
        1,0,0,0,84,85,5,97,0,0,85,86,5,115,0,0,86,8,1,0,0,0,87,88,5,59,0,
        0,88,10,1,0,0,0,89,90,5,105,0,0,90,91,5,110,0,0,91,92,5,116,0,0,
        92,12,1,0,0,0,93,94,5,116,0,0,94,95,5,101,0,0,95,96,5,120,0,0,96,
        97,5,116,0,0,97,14,1,0,0,0,98,99,5,61,0,0,99,16,1,0,0,0,100,101,
        5,104,0,0,101,102,5,117,0,0,102,103,5,110,0,0,103,104,5,116,0,0,
        104,18,1,0,0,0,105,106,5,40,0,0,106,20,1,0,0,0,107,108,5,41,0,0,
        108,22,1,0,0,0,109,110,5,114,0,0,110,111,5,111,0,0,111,112,5,97,
        0,0,112,113,5,114,0,0,113,114,5,111,0,0,114,115,5,117,0,0,115,116,
        5,116,0,0,116,24,1,0,0,0,117,118,5,44,0,0,118,26,1,0,0,0,119,120,
        5,105,0,0,120,121,5,102,0,0,121,28,1,0,0,0,122,123,5,116,0,0,123,
        124,5,104,0,0,124,125,5,101,0,0,125,126,5,110,0,0,126,30,1,0,0,0,
        127,128,5,101,0,0,128,129,5,108,0,0,129,130,5,115,0,0,130,131,5,
        101,0,0,131,32,1,0,0,0,132,133,5,119,0,0,133,134,5,104,0,0,134,135,
        5,105,0,0,135,136,5,108,0,0,136,137,5,101,0,0,137,34,1,0,0,0,138,
        139,5,115,0,0,139,140,5,116,0,0,140,141,5,114,0,0,141,142,5,105,
        0,0,142,143,5,107,0,0,143,144,5,101,0,0,144,36,1,0,0,0,145,146,5,
        123,0,0,146,38,1,0,0,0,147,148,5,125,0,0,148,40,1,0,0,0,149,150,
        5,43,0,0,150,42,1,0,0,0,151,152,5,45,0,0,152,44,1,0,0,0,153,154,
        5,42,0,0,154,46,1,0,0,0,155,156,5,47,0,0,156,48,1,0,0,0,157,158,
        5,38,0,0,158,159,5,38,0,0,159,50,1,0,0,0,160,161,5,124,0,0,161,162,
        5,124,0,0,162,52,1,0,0,0,163,164,5,33,0,0,164,54,1,0,0,0,165,166,
        5,61,0,0,166,167,5,61,0,0,167,56,1,0,0,0,168,172,7,0,0,0,169,171,
        7,1,0,0,170,169,1,0,0,0,171,174,1,0,0,0,172,170,1,0,0,0,172,173,
        1,0,0,0,173,58,1,0,0,0,174,172,1,0,0,0,175,177,7,2,0,0,176,175,1,
        0,0,0,177,178,1,0,0,0,178,176,1,0,0,0,178,179,1,0,0,0,179,60,1,0,
        0,0,180,186,5,34,0,0,181,185,8,3,0,0,182,183,5,92,0,0,183,185,9,
        0,0,0,184,181,1,0,0,0,184,182,1,0,0,0,185,188,1,0,0,0,186,184,1,
        0,0,0,186,187,1,0,0,0,187,189,1,0,0,0,188,186,1,0,0,0,189,190,5,
        34,0,0,190,62,1,0,0,0,191,193,7,4,0,0,192,191,1,0,0,0,193,194,1,
        0,0,0,194,192,1,0,0,0,194,195,1,0,0,0,195,196,1,0,0,0,196,197,6,
        31,0,0,197,64,1,0,0,0,198,199,5,47,0,0,199,200,5,47,0,0,200,204,
        1,0,0,0,201,203,8,5,0,0,202,201,1,0,0,0,203,206,1,0,0,0,204,202,
        1,0,0,0,204,205,1,0,0,0,205,207,1,0,0,0,206,204,1,0,0,0,207,208,
        6,32,0,0,208,66,1,0,0,0,7,0,172,178,184,186,194,204,1,6,0,0
    ]

class ExprLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    ID = 29
    INT = 30
    STRING = 31
    WS = 32
    COMMENT = 33

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'@start'", "'@end'", "'roar'", "'as'", "';'", "'int'", "'text'", 
            "'='", "'hunt'", "'('", "')'", "'roarout'", "','", "'if'", "'then'", 
            "'else'", "'while'", "'strike'", "'{'", "'}'", "'+'", "'-'", 
            "'*'", "'/'", "'&&'", "'||'", "'!'", "'=='" ]

    symbolicNames = [ "<INVALID>",
            "ID", "INT", "STRING", "WS", "COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "ID", "INT", "STRING", "WS", "COMMENT" ]

    grammarFileName = "Expr.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


